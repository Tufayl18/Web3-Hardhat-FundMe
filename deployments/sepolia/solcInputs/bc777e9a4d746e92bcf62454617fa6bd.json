{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in usd\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n//968264 gas\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    //Type Declarations\n    using PriceConverter for uint256;\n\n    //State Variables\n    uint256 public constant MIN_USD = 50 * 1e18;\n\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmount;\n\n    address private immutable i_owner;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    modifier onlyOwner() {\n        //require(msg.sender == i_owner, \"Sender is not owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        // Want to set minimum amount in USD\n        //\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n            \"Not enough ether\"\n        ); // 1e18 == 1*10*18 = 1000000000000000000\n        s_funders.push(msg.sender);\n        s_addressToAmount[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmount[funder] = 0;\n        }\n        //reset array\n        s_funders = new address[](0);\n        //withdraw funds\n\n        //call //recommended\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithDraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        //mappings can't be in memory\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    //view, pure\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmount(address funder) public view returns (uint256) {\n        return s_addressToAmount[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface pricefeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = pricefeed.latestRoundData();\n        // Eth in USD\n        // 3267.00000000\n        return uint256(answer * 1e10);\n    }\n\n    // function getVersion(\n    //     AggregatorV3Interface pricefeed\n    // ) internal view returns (uint256) {\n    //     return pricefeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmtInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmtInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}